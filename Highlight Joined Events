// ==UserScript==
// @name         Batang Pinoy Highlight Joined Events (Main+Sub only)
// @namespace    http://tampermonkey.net/
// @version      3.6
// @description  Highlight Update Events rows that match Profile events by Main/Sub only (ignore Age Category differences).
// @match        https://bp.psc.games/admin/index.php*
// @match        https://bp.psc.games/admin/bp_edit_events.php*
// @grant        GM_setValue
// @grant        GM_getValue
// @run-at       document-idle
// @updateURL    https://raw.githubusercontent.com/DarizV1/bbppunderground/refs/heads/main/Highlight%20Joined%20Events
// @downloadURL  https://raw.githubusercontent.com/DarizV1/bbppunderground/refs/heads/main/Highlight%20Joined%20Events
// ==/UserScript==

(function () {
    'use strict';
  
    function normalizeText(s) {
      return (s || "")
        .replace(/\u00A0/g, ' ')
        .replace(/\s+/g, ' ')
        .trim()
        .toUpperCase();
    }
  
    function extractMainWithoutSeed(raw) {
      if (!raw) return '';
      let txt = normalizeText(raw);
      // remove trailing time formats like "32.14" or "3:10.14"
      // also remove trailing parenthetical that contains a time-like value
      txt = txt
        .replace(/\((?:\s*\d+(?::\d+)?(?:\.\d+)?)\s*\)$/g, '')
        // remove trailing mm:ss(.ss) or ss(.ss) or bare integer times at end
        .replace(/(?:\b\d{1,2}:\d{2}(?:\.\d+)?|\b\d+(?:\.\d+)?)(?=\s*$)/, '')
        // collapse distance spacing like "200 M" -> "200M"
        .replace(/(\d)\s*M\b/g, '$1M')
        .trim();
      return txt;
    }

    function normalizeSubCategory(raw) {
      let sub = normalizeText(raw);
      // unify MIXED AGE GROUP and AGE GROUP as AGE GROUP
      if (sub.startsWith('MIXED AGE GROUP')) sub = 'AGE GROUP';
      // strip trailing explicit age ranges
      sub = sub.replace(/\b\d+\s*-\s*\d+\s*YEARS?\s*OLD\b/g, '').trim();
      if (sub === '') sub = 'AGE GROUP';
      return sub;
    }
  
    function ensureStyles() {
      if (document.getElementById('bp-ev-styles')) return;
      const style = document.createElement('style');
      style.id = 'bp-ev-styles';
      style.textContent = 
        '.bp-ev-hit{background-color:#d4edda !important;border-left:4px solid #28a745 !important;}';
      document.head.appendChild(style);
    }

    function composeKey(main, sub) {
      return `${main}||${sub}`;
    }

    function getSavedKeys() {
      const keysArr = GM_getValue('bp_joined_events_keys');
      if (Array.isArray(keysArr) && keysArr.length) return new Set(keysArr);
      const legacy = GM_getValue('bp_joined_events_simple', []);
      if (Array.isArray(legacy) && legacy.length) {
        const converted = legacy.map(ev => composeKey(ev.main, ev.sub));
        GM_setValue('bp_joined_events_keys', converted);
        return new Set(converted);
      }
      return new Set();
    }

    // Save profile events
    function readProfileAndSave() {
      const rows = document.querySelectorAll('#custom-tabs-one-profile table.table tbody tr');
      const keySet = new Set();
      rows.forEach(r => {
        const tds = r.querySelectorAll('td, th');
        const main = extractMainWithoutSeed(tds[0]?.textContent || '');
        const sub  = normalizeSubCategory(tds[1]?.textContent || '');
        if (main) keySet.add(composeKey(main, sub));
      });
      GM_setValue('bp_joined_events_keys', Array.from(keySet));
    }
  
    // Highlight events in Update Events table
    function highlightTable(root) {
      const savedKeys = getSavedKeys();
      if (!savedKeys.size) return;
  
      const rows = root.querySelectorAll('table.table tbody tr');
      rows.forEach(tr => {
        const tds = tr.querySelectorAll('td');
        if (!tds.length) return;
  
        const tryMain = (i) => extractMainWithoutSeed(tds[i]?.childNodes[0]?.textContent || tds[i]?.textContent || '');
        const trySub  = (i) => normalizeSubCategory(tds[i]?.textContent || '');

        // try typical positions [1]=main, [2]=sub; fallback to neighbors if needed
        let main = tryMain(1);
        let sub  = trySub(2);

        if (!main && tds.length > 0) main = tryMain(0);
        if (!sub && tds.length > 3) sub = trySub(3);
  
        tr.classList.remove('bp-ev-hit');
        if (savedKeys.has(composeKey(main, sub))) {
          tr.classList.add('bp-ev-hit');
        }
      });
    }
  
    function observeEventsTable(root) {
      const tbody = root.querySelector('table.table tbody');
      if (!tbody) return;
      let t;
      const mo = new MutationObserver(() => {
        clearTimeout(t);
        t = setTimeout(() => highlightTable(root), 100);
      });
      mo.observe(tbody, { childList: true, subtree: true });
    }

    function watchModal() {
      const modal = document.getElementById('uni_modal');
      if (!modal) return;
      const mo = new MutationObserver(() => {
        const table = modal.querySelector('table.table tbody tr');
        if (table) setTimeout(() => highlightTable(modal), 100);
      });
      mo.observe(modal, { childList: true, subtree: true });
      observeEventsTable(modal);
    }

    function watchProfileTab() {
      const container = document.getElementById('custom-tabs-one-profile');
      if (!container) return;
      let t;
      const mo = new MutationObserver(() => {
        clearTimeout(t);
        t = setTimeout(() => readProfileAndSave(), 200);
      });
      mo.observe(container, { childList: true, subtree: true });
    }
  
    function init() {
      ensureStyles();
      if (location.pathname.includes('index.php')) {
        readProfileAndSave();
        watchProfileTab();
        watchModal();
      }
      if (location.pathname.includes('bp_edit_events.php')) {
        highlightTable(document);
        observeEventsTable(document);
      }
    }
  
    if (document.readyState === 'loading') {
      document.addEventListener('DOMContentLoaded', init);
    } else {
      init();
    }
  })();
